name: QvSimplePlugin Simple Plugin - cmake

on: 
  push:
  release:
    types: [prereleased]

jobs:
  build:
    strategy:
      matrix:
        qt_version: [5.11.3, 5.12.7, 5.13.2, 5.14.2]
        platform: [ubuntu-16.04, macos-latest, windows-latest]
        arch: [x86, x64]
        include: 
          - platform: windows-latest
            arch: x86
            qtarch: win32_msvc2017
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2017_64
        exclude:
          - platform: ubuntu-16.04
            arch: x86
          - platform: macos-latest
            arch: x86
          - platform: windows-latest
            qt_version: 5.11.3
          - platform: windows-latest
            qt_version: 5.12.7
      fail-fast: false
        
    runs-on: ${{ matrix.platform }}
    env:
      _QV2RAY_BUILD_INFO_: "QvSimplePlugin built from Github Action"
      _QV2RAY_BUILD_EXTRA_INFO_: "qt${{ matrix.qt_version }}-${{ github.sha }}-ci.${{ matrix.platform }}"
    
    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Checking out sources
        uses: actions/checkout@master
      - name: Install Python 3.7 version
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
          architecture: ${{ matrix.arch }}
      - name: Restoring submodules
        run: git submodule update --init
# =========================================================================================================
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with: 
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from QvSimplePlugin-deps repo
          toolset: 14.2
          arch: ${{ matrix.arch }}
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
      - name: Installing Qt - ${{ matrix.arch }}
        uses: jurplel/install-qt-action@v2.5.0
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
# =========================================================================================================
      - name: Linux - ${{ matrix.qt_version }} - Build preparation - Install Packages 
        if: matrix.platform == 'ubuntu-16.04'
        run: |
          sudo apt update
          sudo apt install -y ninja-build
# --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Build preparation - Install Packages 
        if: matrix.platform == 'macos-latest'
        run: |
          brew install ninja
# --------------------------------------------------------
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
        shell: bash
        if: matrix.platform == 'windows-latest'
        run: |
         choco install -y ninja
# ========================================================================================================= Generate MakeFile and Build
      - name: macOS - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel $(sysctl -n hw.logicalcpu)
          sudo cmake --install .
          sudo chmod -Rv a+rw ./
# --------------------------------------------------------        
      - name: Windows - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'windows-latest'
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=./deployment -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel $(nproc)
          cmake --install .
# --------------------------------------------------------
      - name: Linux - ${{ matrix.qt_version }} - Generate Dependencies and Build
        if: matrix.platform == 'ubuntu-16.04'
        shell: bash
        env:
          CC: /usr/bin/gcc-9
          CXX: /usr/bin/g++-9
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=./AppDir/usr -DCMAKE_BUILD_TYPE=Release -DQV2RAY_TRANSLATION_PATH=QApplication::applicationDirPath\(\)+"/../share/qv2ray/lang"
          cmake --build . --parallel $(nproc)
          cmake --install .
# ========================================================================================================= Deployments
      - name: Linux - ${{ matrix.qt_version }} - Uploading artifact
        if: matrix.platform == 'ubuntu-16.04'
        uses: actions/upload-artifact@master
        with:
          name: QvSimplePlugin-${{ github.sha }}.linux-${{ matrix.arch }}.qt${{ matrix.qt_version }}.AppImage
          path: build/AppDir/QvSimplePlugin.AppImage
      - name: Linux - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'ubuntu-16.04' && matrix.qt_version == '5.14.2'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/AppDir/QvSimplePlugin.AppImage
          asset_name: QvSimplePlugin.${{ steps.get_version.outputs.VERSION }}.linux-${{ matrix.arch }}.AppImage
          tag: ${{ github.ref }}
          overwrite: true
# --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Uploading Artifact
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@master
        with:
          name: QvSimplePlugin-${{ github.sha }}.macOS-${{ matrix.arch }}.qt${{ matrix.qt_version }}.zip
          path: build/QvSimplePlugin.app.tar.gz
      - name: macOS - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'macos-latest' && matrix.qt_version == '5.14.2'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/QvSimplePlugin.app.tar.gz
          asset_name: QvSimplePlugin.${{ steps.get_version.outputs.VERSION }}.macOS-${{ matrix.arch }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
# --------------------------------------------------------
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Create 7z Release
        if: matrix.platform == 'windows-latest'
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./build/deployment/
          pathTarget: ./release.7z
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Uploading artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@master
        with:
          name: QvSimplePlugin-${{ github.sha }}.Windows-${{ matrix.arch }}.qt${{ matrix.qt_version }}.7z
          path: release.7z
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'windows-latest' && matrix.qt_version == '5.14.2'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release.7z
          asset_name: QvSimplePlugin.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}.7z
          tag: ${{ github.ref }}
          overwrite: true
